// // В данном блоке дз вы видите 10 задач по нарастающей сложности на отработку асинхронности и отправки запросов!
// // Создайте функцию, которая делает Fetch-запрос к JSON Placeholder API для получения списка пользователей и выводит их в консоль.

fetch(`https://jsonplaceholder.typicode.com/users`)
    .then((responese) => responese.json())
    .then((users) => console.log(users))


// // Модифицируйте предыдущую функцию так, чтобы она возвращала Promise с данными о пользователях, 
// а затем вызовите этот Promise и выведите результат в консоль.

async function fetchUsers() {
    try {
        const userInfo = await fetch(`https://jsonplaceholder.typicode.com/users`)
        const userJson = await userInfo.json()
        return userJson
    } catch (error) {
        console.log(error)
    }
}
fetchUsers()
    .then((userInfo) => userInfo.json())
    .then((users) => console.log(users))

// // Создайте функцию, которая делает Fetch-запрос к JSON Placeholder API для получения списка постов конкретного пользователя 
// (по его ID) и выводит их в консоль.


// // Модифицируйте предыдущую функцию так, чтобы она принимала параметр (ID пользователя) и возвращала Promise 
// с данными о постах этого пользователя.


// // Создайте функцию, которая делает Fetch-запрос для создания нового поста на JSON Placeholder API и выводит 
// созданный пост в консоль.


// // Модифицируйте предыдущую функцию так, чтобы она принимала параметры (заголовок, текст) для создания поста и возвращала Promise с созданным постом.


// // Создайте функцию, которая делает Fetch-запрос для обновления существующего поста на JSON Placeholder API и 
// выводит обновленный пост в консоль.


// // Модифицируйте предыдущую функцию так, чтобы она принимала параметры (ID поста, новый заголовок, новый текст) 
// для обновления поста и возвращала Promise с обновленным постом.


// // Создайте функцию, которая делает Fetch-запрос для удаления существующего поста на JSON Placeholder API и 
// выводит сообщение об успешном удалении в консоль.


// // Модифицируйте предыдущую функцию так, чтобы она принимала параметр (ID поста) для удаления поста и возвращала 
// Promise с сообщением об успешном удалении.


// // Эти задания помогут понять работу с асинхронными операциями, Promise и async/await на примере взаимодействия с API.